// https://kotlinlang.org/docs/reference/using-gradle.html#configuring-dependencies

group = 'kek'
version = '0.0.1-SNAPSHOT'

buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlin_version}"
    }
}

apply plugin: "kotlin2js"

repositories {
    jcenter()
}

configurations {
    ktlint
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-js:${kotlin_version}"
    ktlint "com.github.shyiko:ktlint:${ktlint_version}"
}

task ktlint(type: JavaExec, group: "verification") {
    description = "Check Kotlin code style."
    classpath = configurations.ktlint
    main = "com.github.shyiko.ktlint.Main"
    args "src/**/*.kt"
    // to generate report in checkstyle format prepend following args:
    // "--reporter=plain", "--reporter=checkstyle,output=${buildDir}/ktlint.xml"
    // see https://github.com/shyiko/ktlint#usage for more
}
check.dependsOn ktlint

task ktlintFormat(type: JavaExec, group: "formatting") {
    description = "Fix Kotlin code style deviations."
    classpath = configurations.ktlint
    main = "com.github.shyiko.ktlint.Main"
    args "-F", "src/**/*.kt"
}

compileKotlin2Js.kotlinOptions {
    metaInfo = true
    sourceMap = true
    suppressWarnings = true
    moduleKind = "commonjs" //this is important to properly allow require() import
    outputFile = "${output_dir_app}/${rootProject.name}.js"
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.2.1'
}

// Need to deploy on Heroku
// https://devcenter.heroku.com/articles/deploying-gradle-apps-on-heroku
task stage(dependsOn: ['build', 'clean'])
build.mustRunAfter clean

task copyJsFilesFromDependencies(dependsOn: build) {
    try {
        //copy all necessary .js files
        configurations.compile.each { File file ->
            copy {
                includeEmptyDirs = true
                println("cmp: ${file.absolutePath}")
                from zipTree(file.absolutePath)
                into "${output_dir_app}/lib"
                include { fileTreeElement ->
                    def path = fileTreeElement.path
                    def include = path.endsWith(".js") && (path.startsWith("META-INF/resources/") || !path.startsWith("META-INF/"))
                    if (include) println("unziping $path")
                    return include
                }
            }
        }
    } catch (Exception e) {
        System.err.println(e.getMessage())
    }
}
